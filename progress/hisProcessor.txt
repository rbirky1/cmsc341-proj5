
package project5;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;

import javax.imageio.ImageIO;

/**
 * @author Rachael Birky
 * @version 05.09.2014
 * 
 * <p> Processor.java
 * <p> This class processes data using threads and ForkJoin
 * 		It 1. sorts 2. normalizes 3. saves an image
 */
public class Processor implements Runnable{

	ForkJoinPool threadPool = new ForkJoinPool();

	int[] buff2;
	int[] buff2Scaled;
	int N;
	int THRESHOLD;

	/**
	* <p> Constructor
	* <p> Description: creates a new processing object thread
	* 		that can sort, normalize and save graphic representations of data
	* @param aBuffer - integer array of data to be processed
	* @param N - current size
	* @param - T threshold
	*/
	public Processor(int[] aBuffer, int N, int T){
		buff2 = aBuffer;
		buff2Scaled = new int[buff2.length];
		this.N = N;
		this.THRESHOLD = T;
	}

	//Debug method
	public void printBuff(){
		for(int i : buff2){
			System.out.print(i+" ");
		}
		System.out.println();
	}
	
	/**
	* <p> Method: mergeSort()
	* <p> Description: Boot-strap method that gives data to
	* 		mergesort that handles task recursion object creation
	*/
	public void mergeSort(){
		mergeSort(buff2, THRESHOLD);
	}
	
	/**
	* <p> Method: mergeSort
	* <p> Description: Given data, creates and invokes new objects
	* 		to manage task recursion
	* @param array - data to be processed
	* @param Threshold - limit of data before insertion sort is called
	*/
	public void mergeSort(int[] array, int Threshold){
		int first = 0;
		int last = array.length;
		
		if(last-first < Threshold){
			insertionSort(array); return;
		}
		int center = (last-first)/2;
		System.out.printf("value of first: %d, value of last: %d", buff2[first], buff2[last]);
		threadPool.invoke(new MergeSort(array, first, center, last, Threshold));
	}
	
	/**
	 * <p> Method: merge()  
	 * <p> Description: Combines two sorted lists into one
	 * @param data - array of data
	 * @param first - beginning index of data
	 * @param leftSize - size of first "array"
	 * @param rightSize - size of second "array" 
	 */
	public void merge(int[ ] data, int first, int center, int last){
		int[ ] temp = new int[last-center+1];
		int index  = 0;
		int leftIndex = first;
		int rightIndex = center+1;
		int i;
		//go through "separate" left and right sides
		while ((leftIndex < center) && (rightIndex < last)){
			if (data[leftIndex] < data[center+rightIndex]){
				temp[index] = data[leftIndex];
				index++;
				leftIndex++;
			}
			else{
				temp[index] = data[center+rightIndex];
				index++;
				rightIndex++;
			}
		}

		//add rest of left
		while (leftIndex < center){
			temp[index] = data[leftIndex];
			index++;
			leftIndex++;
		}
		//add rest of right
		while (rightIndex < last){
			temp[index] = data[center+rightIndex-1];
			index++;
			rightIndex++;
		}

		//copy to original
		for (i=0; i < data.length; i++)
			data[i] = temp[i];
	}

	/**
	 * @author Rachael Birky
	 * @version 05.11.2014
	 * 
	 * <p> MergeSort.java
	 * <p> This class performs task recursion for merge sorting
	 */
	@SuppressWarnings("serial")
	class MergeSort extends RecursiveAction {

		protected int THRESHOLD;
		int[] array;
		int[] tempArray;
		int first;
		int mid;
		int last;

		/**
		* <p> Constructor
		* <p> Description: creates a new mergesort task object
		* @param array - data to be processed
		* @param first - first index of current array
		* @param last - end index of current array
		* @param T - threshold for task recursion
		*/
		public MergeSort(int[] array, int first, int mid, int last, int T) {
			this.THRESHOLD = T;
			this.array = array;
			this.first = first;
			this.mid = mid;
			this.last = last;
		}

		/* (non-Javadoc)
		 * @see java.util.concurrent.RecursiveAction#compute()
		 */
		protected void compute() {
			if (last-first < this.THRESHOLD)
				//Compute directly
				insertionSort(array);
			else {
				//Split Task
				//int center = (first+last)/2;
				MergeSort sortLeft = new MergeSort(array, first, mid, last, this.THRESHOLD); //sort left
				MergeSort sortRight = new MergeSort(array, first, mid+1, last, this.THRESHOLD); //sort right
				invokeAll(sortLeft, sortRight);
				merge(array, first, mid, last); //combine sorted lists = ArrayIndexOutOfBounds error
			}
		}
	}


	/**
	 * <p> Method: insertionSort()
	 * <p> Description: Sorts by inserting the item at the current index
	 * 		so that all items before it are lesser in value
	 * @param subArray - list to be sorted
	 */
	public void insertionSort(int[] subArray){
		for (int i = 1; i<subArray.length; i++){
			int toCompare = subArray[i];
			int j = i;
			while (j>0 && (subArray[j-1] > toCompare)){
				subArray[j] = subArray[j-1];
				j--;
			}
			subArray[j] = toCompare;
		}
	}


	/**
	 * <p> Method: normalize()
	 * <p> Description: Adjusts the range of data to the range 0-255
	 */
	public void normalize(){
		int i=0;
		for(Integer x : buff2){
			int min = 0;
			int max = 4096;
			int a = 0;
			int b = 255;
			int newX = ((((b-a)*(x-min))/(max-min))+a);
			buff2Scaled[i] = newX;
			i++;
		}		
	}

	//Debug method
	public void printBuffScaled(){
		for(int i : buff2Scaled){
			System.out.print(i+" ");
		}
		System.out.println();
	}

	/**
	 * <p> Method: saveImage()
	 * <p> Description: Saves a gradient image representing the sorted
	 * 		and normalized data to the ./images folder
	 */
	public void saveImage(){
		int width = N;
		int height = N;

		if (buff2Scaled.length != N*N){
			System.out.println("ERROR");
			return;
		}

		try{
			BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

			int index = 0;
			int value = 0;
			while (index<buff2Scaled.length) {
				value = buff2Scaled[index];
				bufferedImage.setRGB((int)index%width, (int)index/width, (value << 16) + (value << 8) + value);
				index++;
			}
			String filename = String.format("images/output_image_N%d_T%d.jpg", N, THRESHOLD);
			System.out.println("Saving image: " + filename);
			ImageIO.write(bufferedImage, "jpg", new File(filename));
		}
		catch (IOException e) {
			System.out.println(e.getMessage());
		}

	}


	/* (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 */
	public void run() {
		long t1 = System.currentTimeMillis();
		this.mergeSort();
		long t2 = System.currentTimeMillis();
		System.out.println("MergeSort time: " +(t2-t1)+"ms");
		normalize();
		saveImage();
	}

	//Unit Testing
		public static void main(String[] args){
			int[] l = new int[10000];
			int n = 100;
			int t = 100;
			Random generator = new Random();
			for (int i=0; i<10000; i++){
				l[i]= generator.nextInt(4097);
			}
			Processor p = new Processor(l,n,t);
			long t1 = System.currentTimeMillis();
			p.mergeSort();
			long t2 = System.currentTimeMillis();
			System.out.println("MergeSort time: " +(t2-t1)+"ms");
			p.printBuff();
			p.normalize();
			p.printBuffScaled();
			p.saveImage();
			int[] ints = {1,3,5,2,4,6};
			p.merge(ints, 0, 2, 4);
			for(int i=0; i<ints.length;i++){
				System.out.print(ints[i]+" ");
			}
		}
}